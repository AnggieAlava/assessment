// TODO: eliminar axios del proyecto?
// import axios from "axios";
import { useContext, useEffect, useRef } from "react";
import { StoreContext } from "@store/StoreProvider";
import { types } from "@store/reducer";
// after relative path ../../../store/StoreProvider
// after relative path "../../../store/reducer"
import styles from "@styles/Home.module.css";
import QuizCard from "src/components/quizCard";
import Head from "next/head";

export const getStaticPaths = async () => {
  const res = await fetch("https://breathecode.herokuapp.com/v1/assessment/");
  const data = await res.json();
  const paths = data.map((res) => {
    return {
      params: { slug: res.slug.toString() },
    };
  });
  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const slug = context.params.slug;
  const res = await fetch(
    `https://breathecode.herokuapp.com/v1/assessment/${slug}`
  );
  const data = await res.json();
  return {
    props: { quiz: data },
  };
};

const QuizSlug = ({ quiz }) => {
  const [store, dispatch] = useContext(StoreContext);
  const intervalRef = useRef(null)

  useEffect(() => {
    dispatch({
      type: types.setQuiz,
      payload: quiz.questions,
    });
  }, []);


  // console.log("dateNOW", Date.now() - store.timer)

  // TODO: Si tengo tiempo, podria transformar segundos a minutos
  const handleStartQuiz = () => {
    if (store.started) {
      clearInterval(intervalRef.current)
    } else {
      const startTime = Date.now() - store.timer
      intervalRef.current = setInterval(() => {
        dispatch({
          type: types.startTimer,
          payload: Math.floor((Date.now() - startTime) / 1000)
        })
      }, 1000)
    }
    dispatch({ type: types.setStarted })
  }

  // console.log("DATAAAA::", store.quiz);
  // TODO: implementar cronometro de tiempo y crear QUIZ
  return (
    <div className={styles.container}>
      <Head>
        <title>{quiz.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.quiz_main}>
        {!store.started  ? (
          <>
            <h1 className={styles.quiz_title}>{quiz.title}</h1>

            <div className={styles.grid}>
              <button
                className={styles.start}
                onClick={handleStartQuiz}
              >
                <h2>Start</h2>
              </button>
            </div>
          </>
        ) : (
          <QuizCard /> 
        )
      }
      </div>
    </div>
  );
};

export default QuizSlug;

{/* <br/>
<p>{store.score}</p>
<br/>
<p>{correctMsg[Math.floor(Math.random() * correctMsg.length)]}</p> */}

